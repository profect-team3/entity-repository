services:
  postgres:
    image: postgres:16.9
    container_name: sample-postgres
    ports:
      - 5432:5432
    environment:
      - POSTGRES_DB=order_platform
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    env_file:
      - ./.env
    networks:
      - order-network

  redis:
    image: redis:7.0.15
    container_name: sample-redis
    ports:
      - 6379:6379
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    command: redis-server --requirepass ${REDIS_PASSWORD}
    env_file:
      - ./.env
    networks:
      - order-network

  mongodb:
    image: mongo:8.0.12
    container_name: store-db
    ports:
      - 27017:27017
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
    env_file:
      - ./.env
    networks:
      - order-network

  broker1:
    hostname: broker1
    image: apache/kafka:3.9.1
    container_name: broker1
    ports:
      - 9092:9092
      - 7071:7071
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_INTERNAL://0.0.0.0:29092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker1:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker1:9093,2@broker2:9093,3@broker3:9093'
      KAFKA_CLUSTER_ID: f47ac10b-58cc-4372-a567-0e02b2c3d479
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_OPTS: >-
        -javaagent:/opt/jmx/jmx_prometheus_javaagent.jar=7071:/opt/jmx/kafka-jmx.yml
    volumes:
      - ./jmx:/opt/jmx
    networks:
      order-network:
        aliases:
          - broker1

  broker2:
    hostname: broker2
    image: apache/kafka:3.9.1
    container_name: broker2
    ports:
      - 9094:9094
      - 7072:7072
    environment:
      KAFKA_NODE_ID: 2
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9094,PLAINTEXT_INTERNAL://0.0.0.0:29092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9094,PLAINTEXT_INTERNAL://broker2:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker1:9093,2@broker2:9093,3@broker3:9093'
      KAFKA_CLUSTER_ID: f47ac10b-58cc-4372-a567-0e02b2c3d479
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_OPTS: >-
        -javaagent:/opt/jmx/jmx_prometheus_javaagent.jar=7072:/opt/jmx/kafka-jmx.yml
    volumes:
      - ./jmx:/opt/jmx
    networks:
      order-network:
        aliases:
          - broker2

  broker3:
    hostname: broker3
    image: apache/kafka:3.9.1
    container_name: broker3
    ports:
      - 9096:9096
      - 7073:7073
    environment:
      KAFKA_NODE_ID: 3
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9096,PLAINTEXT_INTERNAL://0.0.0.0:29092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9096,PLAINTEXT_INTERNAL://broker3:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker1:9093,2@broker2:9093,3@broker3:9093'
      KAFKA_CLUSTER_ID: f47ac10b-58cc-4372-a567-0e02b2c3d479
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_OPTS: >-
        -javaagent:/opt/jmx/jmx_prometheus_javaagent.jar=7073:/opt/jmx/kafka-jmx.yml
    volumes:
      - ./jmx:/opt/jmx
    networks:
      order-network:
        aliases:
          - broker3

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports: ["8079:8080"]
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: 'broker1:29092,broker2:29092,broker3:29092'
      DYNAMIC_CONFIG_ENABLED: 'true'
    depends_on: [broker1, broker2, broker3]
    networks: [order-network]

#   --- Kafka 메트릭 수집기 ---
  kafka_exporter:
    restart: unless-stopped
    image: danielqsj/kafka-exporter:latest
    container_name: kafka-exporter
    command:
      - --kafka.server=broker1:29092
      - --kafka.server=broker2:29092
      - --kafka.server=broker3:29092
      - --web.listen-address=:9308
    depends_on: [broker1, broker2, broker3]
    ports: ["9308:9308"]
    networks: [order-network]

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro

    depends_on: [kafka_exporter, broker1, broker2, broker3]
    ports: ["9090:9090"]
    networks: [order-network]

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    depends_on: [prometheus]
    ports: ["3000:3000"]
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks: [order-network]

networks:
  order-network:
    driver: bridge