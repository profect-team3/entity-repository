import uuid
import random
from faker import Faker
from datetime import datetime, timedelta
import csv  # CSV 라이브러리 추가

# 한국어 데이터를 위한 Faker 초기화
fake = Faker('ko_KR')

# --- 생성할 데이터 개수 설정 ---
NUM_CATEGORIES = 10
NUM_USERS = 100
NUM_STORES = 50
NUM_MENUS_PER_STORE = 20

## --- 시간대별 주문량 조절을 위한 설정 ---
NUM_DAYS_OF_DATA = 30
ORDER_COUNT_BY_HOUR = {
    0: 2, 1: 1, 2: 0, 3: 0, 4: 0, 5: 0,
    6: 1, 7: 1, 8: 2, 9: 3, 10: 5, 11: 8,
    12: 15, 13: 10,
    14: 5, 15: 3, 16: 3, 17: 6,
    18: 12, 19: 18, 20: 15, 21: 10,
    22: 8, 23: 5
}

# 생성된 ID 저장
region_ids = []
category_ids_map = {}
user_ids = list(range(1, NUM_USERS + 1))
store_ids_map = {}
order_ids_map = {}


# [수정] SQL 파일과 CSV 파일을 동시에 열기
with open('dummy_data2.sql', 'w', encoding='utf-8') as f_sql, \
     open('orders_log2.csv', 'w', newline='', encoding='utf-8') as f_csv:

    f_sql.write("-- Dummy Data Generated by Python Script (with time-based order simulation)\n\n")

    # [추가] CSV 파일 준비 및 헤더(첫 줄) 작성
    csv_writer = csv.writer(f_csv)
    csv_writer.writerow(['orders_id', 'created_at', 'store_id', 'total_price'])

    # --- 1. 지역(Region) 데이터 생성 ---
    f_sql.write("-- 1. REGION DATA\n")
    region_uuid = str(uuid.uuid4())
    region_ids.append(region_uuid)
    f_sql.write(
        f"INSERT INTO p_region (created_at, updated_at, region_id, region_code, region_name, is_active, full_name, sido, sigungu, eupmyendong) VALUES "
        f"('2025-01-01 00:00:00', '2025-01-01 00:00:00', '{region_uuid}', '11110', '세종로', TRUE, '서울특별시 종로구 세종대로 178', '서울특별시', '종로구', '세종로');\n\n"
    )

    # --- (카테고리, 유저, 가게, 메뉴 생성 코드는 이전과 동일하여 생략) ---
    # --- 2. 카테고리(Category) 데이터 생성 ---
    f_sql.write("-- 2. CATEGORY DATA\n")
    categories = ['치킨', '피자', '한식', '중식', '일식', '분식', '카페·디저트', '패스트푸드', '아시안', '족발·보쌈']
    for i in range(NUM_CATEGORIES):
        category_uuid = str(uuid.uuid4())
        category_name = categories[i]
        category_ids_map[category_name] = category_uuid
        f_sql.write(
            f"INSERT INTO p_category (created_at, updated_at, category_id, category_name) VALUES "
            f"('2025-01-01 00:00:00', '2025-01-01 00:00:00', '{category_uuid}', '{category_name}');\n"
        )
    f_sql.write("\n")

    # --- 3. 유저(User) 데이터 생성 ---
    f_sql.write("-- 3. USER DATA\n")
    owner_user_ids = user_ids[:NUM_STORES]
    customer_user_ids = user_ids[NUM_STORES:]
    fake.unique.clear()
    for user_id in user_ids:
        role = 'OWNER' if user_id in owner_user_ids else 'CUSTOMER'
        real_name = fake.name()
        username = fake.unique.user_name()
        email = fake.unique.email()
        phone_number = fake.unique.phone_number()
        nickname = f"{real_name.replace(' ', '')}{user_id}"
        password = 'hashed_password_placeholder'
        f_sql.write(
            f"INSERT INTO p_user (created_at, updated_at, phone_number, user_role, nickname, real_name, username, email, password) VALUES "
            f"('2025-01-01 00:00:00', '2025-01-01 00:00:00', '{phone_number}', '{role}', '{nickname}', '{real_name}', '{username}', '{email}', '{password}');\n"
        )
    f_sql.write("\n")

    # --- 4. 가게(Store) 데이터 생성 ---
    f_sql.write("-- 4. STORE DATA\n")
    category_uuids = list(category_ids_map.values())
    for i in range(NUM_STORES):
        store_uuid = str(uuid.uuid4())
        owner_id = owner_user_ids[i]
        category_uuid = random.choice(category_uuids)
        region_uuid = random.choice(region_ids)
        store_name = f"{fake.company()} {random.choice(categories)}점"
        store_ids_map[store_uuid] = category_uuid
        f_sql.write(
            f"INSERT INTO p_store (created_at, min_order_amount, updated_at, user_id, category_id, region_id, store_id, phone_number, store_name, address, description, store_accept_status) VALUES "
            f"('2025-01-01 00:00:00', 15000, '2025-01-01 00:00:00', {owner_id}, '{category_uuid}', '{region_uuid}', '{store_uuid}', '{fake.phone_number()}', '{store_name}', '{fake.address()}', '신선한 재료로 정성을 다합니다.', 'APPROVE');\n"
        )
    f_sql.write("\n")

    # --- 5. 메뉴(Menu) 데이터 생성 ---
    f_sql.write("-- 5. MENU DATA\n")
    for store_uuid, category_uuid in store_ids_map.items():
        for _ in range(NUM_MENUS_PER_STORE):
            menu_uuid = str(uuid.uuid4())
            f_sql.write(
                f"INSERT INTO p_menu (created_at, updated_at, menu_id, store_id, name, description, price, is_hidden, category_id) VALUES "
                f"('2025-01-01 00:00:00', '2025-01-01 00:00:00', '{menu_uuid}', '{store_uuid}', '맛있는메뉴', '정말 맛있어요!', {random.randint(8, 25) * 1000}, FALSE, '{category_uuid}');\n"
            )
    f_sql.write("\n")

    # --- 6. 시간대별 주문(Order) 데이터 생성 ---
    f_sql.write("-- 6. TIME-BASED ORDER DATA\n")
    store_uuid_list = list(store_ids_map.keys())
    for day_offset in range(NUM_DAYS_OF_DATA):
        for hour, count in ORDER_COUNT_BY_HOUR.items():
            num_orders_this_hour = int(count * random.uniform(0.7, 1.3))

            for _ in range(num_orders_this_hour):
                order_uuid = str(uuid.uuid4())
                user_id = random.choice(customer_user_ids)
                store_id = random.choice(store_uuid_list)
                total_price = random.randint(15, 50) * 1000

                base_time = datetime.now() - timedelta(days=day_offset)
                order_time = base_time.replace(hour=hour, minute=random.randint(0, 59), second=random.randint(0, 59))
                timestamp_str = order_time.strftime('%Y-%m-%d %H:%M:%S')

                # SQL 파일에 INSERT 문 작성
                f_sql.write(
                    f"INSERT INTO p_orders(created_at, updated_at, is_refundable, total_price, orders_id, store_id, order_channel, order_status, receipt_method, payment_method, delivery_address, order_history, user_id) VALUES "
                    f"('{timestamp_str}', '{timestamp_str}', false, {total_price}, '{order_uuid}', '{store_id}', 'ONLINE', 'COMPLETED', 'DELIVERY', 'CREDIT_CARD', '{fake.address()}', '주문 내역 텍스트', {user_id});\n"
                )

                # [추가] CSV 파일에 주문 기록 한 줄 작성
                csv_writer.writerow([order_uuid, timestamp_str, store_id, total_price])

    f_sql.write("\n")
    print(f"'{'dummy_data.sql'}'과 '{'orders_log.csv'}' 파일이 성공적으로 생성되었습니다.")