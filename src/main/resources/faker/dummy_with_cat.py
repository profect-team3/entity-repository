import uuid
import random
from faker import Faker

# 한국어 데이터를 위한 Faker 초기화
fake = Faker('ko_KR')

# --- 생성할 데이터 개수 설정 ---
NUM_USERS = 50
NUM_STORES = 30
NUM_MENUS_PER_STORE = 10
NUM_ORDERS = 100  # 생성할 주문 개수
NUM_REVIEWS = 100 # 생성할 리뷰 개수

# --- 계층형 카테고리 정의 ---
# 딕셔너리 형태로 부모-자식 관계를 명확히 정의합니다.
CATEGORIES = {
    '한식': {
        '식사류': ['백반/가정식', '찌개/찜', '국밥', '면/국수', '죽/수프'],
        '육류': ['삼겹살/고기구이', '족발/보쌈', '곱창/막창/대창', '갈비/찜닭'],
        '기타': ['해산물/아구찜', '분식 (떡볶이, 김밥 등)', '전/빈대떡']
    },
    '일식/중식': {
        '일식': ['초밥/회', '돈가스/카레', '라멘/우동', '덮밥 (규동, 오야꼬동 등)'],
        '중식': ['짜장면/짬뽕', '탕수육/요리류', '마라탕/훠궈'],
        '아시안': ['베트남 음식 (쌀국수, 분짜 등)', '태국 음식', '인도 음식 (카레, 난 등)']
    },
    '양식/패스트푸드': {
        '양식': ['파스타/스테이크', '샐러드', '햄버거'],
        '피자': ['브랜드 피자', '수제 피자', '피자/파스타 세트'],
        '치킨': ['프라이드/양념 치킨', '브랜드 치킨', '찜닭/닭강정']
    },
    '카페/디저트': {
        '디저트': ['케이크/빵', '아이스크림/빙수', '마카롱/쿠키'],
        '음료': ['커피/차', '생과일주스/에이드', '스무디/쉐이크'],
        '간식': ['토스트/샌드위치', '와플/크로플', '핫도그/버거']
    },
    '야식': {
        '야식류': ['족발/보쌈', '곱창/막창', '술안주 (전, 튀김 등)'],
        '기타': ['포장마차 메뉴', '닭발', '감자탕/찜닭']
    }
}

# 생성된 ID를 저장하여 외래 키로 사용
region_ids = []
category_ids_map = {} # 카테고리 이름과 UUID를 매핑하여 저장
user_ids = list(range(1, NUM_USERS + 1))
store_ids_map = {} # 가게 UUID와 카테고리 UUID를 매핑하여 저장
order_ids_map = {} # 주문 UUID와 (유저ID, 가게ID)를 매핑하여 저장


# 생성된 SQL 쿼리를 저장할 파일 열기
with open('dummy_data.sql', 'w', encoding='utf-8') as f:
    f.write("-- Dummy Data Generated by Python Script\n\n")

    # --- 1. 지역(Region) 데이터 생성 ---
    f.write("-- 1. REGION DATA\n")
    region_uuid = str(uuid.uuid4())
    region_ids.append(region_uuid)
    region_code = ''.join(random.choices('0123456789ABCDEF', k=9))
    full_name = f"{fake.city()} {fake.street_name()}"
    sido = fake.province()
    sigungu = fake.city()
    eupmyendong = fake.street_name()

    f.write(
        f"INSERT INTO p_region (created_at, updated_at, region_id, region_code, region_name, is_active, full_name, sido, sigungu, eupmyendong) VALUES "
        f"(now(), now(), '{region_uuid}', '{region_code}', '{eupmyendong}', TRUE, '{full_name}', '{sido}', '{sigungu}', '{eupmyendong}');\n\n"
    )

    # --- 2. 카테고리(Category) 데이터 생성 ---
    f.write("-- 2. CATEGORY DATA\n")

    # 1단계 카테고리 생성
    for category_name in CATEGORIES.keys():
        category_uuid = str(uuid.uuid4())
        category_ids_map[category_name] = category_uuid
        f.write(
            f"INSERT INTO p_category (created_at, updated_at, category_id, category_name, parent_category_id) VALUES "
            f"(now(), now(), '{category_uuid}', '{category_name}', NULL);\n"
        )
    f.write("\n")

    # 2단계 및 3단계 카테고리 생성
    for level1_name, level2_dict in CATEGORIES.items():
        level1_uuid = category_ids_map[level1_name]
        for level2_name, level3_list in level2_dict.items():
            level2_uuid = str(uuid.uuid4())
            category_ids_map[level2_name] = level2_uuid
            f.write(
                f"INSERT INTO p_category (created_at, updated_at, category_id, category_name, parent_category_id) VALUES "
                f"(now(), now(), '{level2_uuid}', '{level2_name}', '{level1_uuid}');\n"
            )

            for level3_name in level3_list:
                level3_uuid = str(uuid.uuid4())
                # 메뉴 생성을 위해 3단계 카테고리도 맵에 저장
                category_ids_map[level3_name] = level3_uuid
                f.write(
                    f"INSERT INTO p_category (created_at, updated_at, category_id, category_name, parent_category_id) VALUES "
                    f"(now(), now(), '{level3_uuid}', '{level3_name}', '{level2_uuid}');\n"
                )
    f.write("\n")

    # --- 3. 유저(User) 데이터 생성 ---
    f.write("-- 3. USER DATA\n")
    owner_user_ids = user_ids[:NUM_STORES] # 가게 수만큼 사장님 유저 할당
    customer_user_ids = user_ids[NUM_STORES:] # 나머지는 고객 유저

    for user_id in user_ids:
        role = 'OWNER' if user_id in owner_user_ids else 'CUSTOMER'
        real_name = fake.name()
        nickname = f"{real_name.replace(' ', '')}{user_id}"
        username = fake.unique.user_name()
        email = fake.unique.email()
        phone_number = fake.unique.phone_number()
        password = 'hashed_password_placeholder'
        usersex = random.choice(['MALE', 'FEMALE'])
        birthdate = fake.date_of_birth(minimum_age=18, maximum_age=70).strftime('%Y-%m-%d')

        f.write(
            f"INSERT INTO p_user (created_at, updated_at, phone_number, user_role, nickname, real_name, username, email, password, usersex, birthdate) VALUES "
            f"(now(), now(), '{phone_number}', '{role}', '{nickname}', '{real_name}', '{username}', '{email}', '{password}', '{usersex}', '{birthdate}');\n"
        )
    f.write("\n")

    # --- 4. 가게(Store) 데이터 생성 ---
    f.write("-- 4. STORE DATA\n")
    # 3단계 카테고리 UUID만 추출하여 가게에 할당
    level3_category_uuids = [v for k, v in category_ids_map.items() if any(k in sublist for sublist in [l for d in CATEGORIES.values() for l in d.values()])]
    for i in range(NUM_STORES):
        store_uuid = str(uuid.uuid4())
        owner_id = owner_user_ids[i]
        category_uuid = random.choice(level3_category_uuids)
        region_uuid = random.choice(region_ids)
        
        # 카테고리 이름으로 가게 이름 생성 (예: '파스타 전문점', '족발보쌈집')
        category_name = [k for k, v in category_ids_map.items() if v == category_uuid][0]
        store_name = f"{category_name.split(' ')[0]} 전문점"
        
        phone_number = fake.phone_number()
        address = fake.address()
        description = f"신선한 재료로 정성을 다하는 {store_name}입니다."
        min_order_amount = random.choice([5000, 10000, 12000, 15000])

        store_ids_map[store_uuid] = category_uuid # 나중에 메뉴 생성 시 사용

        f.write(
            f"INSERT INTO p_store (created_at, min_order_amount, updated_at, user_id, category_id, region_id, store_id, phone_number, store_name, address, description, store_accept_status) VALUES "
            f"(now(), {min_order_amount}, now(), {owner_id}, '{category_uuid}', '{region_uuid}', '{store_uuid}', '{phone_number}', '{store_name}', '{address}', '{description}', 'APPROVE');\n"
        )
    f.write("\n")

    # --- 5. 메뉴(Menu) 데이터 생성 ---
    f.write("-- 5. MENU DATA\n")
    menu_names = ['대표 메뉴 1', '대표 메뉴 2', '추천 메뉴', '인기 메뉴']
    for store_uuid, category_uuid in store_ids_map.items():
        for _ in range(NUM_MENUS_PER_STORE):
            menu_uuid = str(uuid.uuid4())
            name = random.choice(menu_names)
            description = f"정말 맛있는 {name}입니다!"
            price = random.randint(5, 30) * 1000

            f.write(
                f"INSERT INTO p_menu (created_at, updated_at, menu_id, store_id, name, description, price, is_hidden) VALUES "
                f"(now(), now(), '{menu_uuid}', '{store_uuid}', '{name}', '{description}', {price}, FALSE);\n"
            )
    f.write("\n")

    # --- 6. 주문(Order) 데이터 생성 ---
    f.write("-- 6. ORDER DATA\n")
    store_uuid_list = list(store_ids_map.keys())
    all_orders_info = {}  # 모든 주문 정보를 저장 (리뷰와 주문 아이템에서 사용)
    
    for _ in range(NUM_ORDERS):
        order_uuid = str(uuid.uuid4())
        user_id = random.choice(customer_user_ids)
        store_id = random.choice(store_uuid_list)
        total_price = random.randint(15, 50) * 1000
        order_status = random.choice([
            'ACCEPTED',
            'COMPLETED',
         ])

        # 주문 채널, 수령 방법, 결제 방법을 다양하게 설정
        order_channel = random.choice(['ONLINE', 'OFFLINE'])
        receipt_method = random.choice(['DELIVERY', 'TAKE_OUT', 'TAKE_IN'])
        payment_method = random.choice(['CREDIT_CARD', 'SIMPLE_PAY', 'BANK_TRANSFER', 'CASH'])

        # 모든 주문 정보를 저장 (주문 아이템 생성에 필요)
        all_orders_info[order_uuid] = {
            'user_id': user_id, 
            'store_id': store_id,
            'status': order_status
        }

        if order_status == 'COMPLETED':
            order_ids_map[order_uuid] = {'user_id': user_id, 'store_id': store_id}

        f.write(
            f"INSERT INTO p_orders(created_at, updated_at, is_refundable, total_price, orders_id, store_id, order_channel, order_status, receipt_method, payment_method, delivery_address, order_history, user_id) VALUES "
            f"(now(), now(), false, {total_price}, '{order_uuid}', '{store_id}', '{order_channel}', '{order_status}', '{receipt_method}', '{payment_method}', '{fake.address()}', '주문 내역 텍스트', {user_id});\n"
        )
    f.write("\n")

    # --- 6-1. 주문 아이템(Order Item) 데이터 생성 ---
    f.write("-- 6-1. ORDER ITEM DATA\n")
    menu_items = ['치킨 세트', '피자 라지', '햄버거 세트', '파스타', '샐러드', '스테이크', '라멘', '돈가스', '김치찌개', '불고기']
    
    for order_uuid, order_info in all_orders_info.items():
        # 각 주문당 1-4개의 아이템 생성
        num_items = random.randint(1, 4)
        for _ in range(num_items):
            order_item_uuid = str(uuid.uuid4())
            menu_name = random.choice(menu_items)
            price = random.randint(5, 30) * 1000
            quantity = random.randint(1, 3)

            f.write(
                f"INSERT INTO p_b_order_item (created_at, updated_at, order_item_id, orders_id, menu_name, price, quantity) VALUES "
                f"(now(), now(), '{order_item_uuid}', '{order_uuid}', '{menu_name}', {price}, {quantity});\n"
            )
    f.write("\n")

    # --- 7. 리뷰(Review) 데이터 생성 ---
    f.write("-- 7. REVIEW DATA\n")
    completed_orders = list(order_ids_map.items())
    num_reviews_to_create = min(NUM_REVIEWS, len(completed_orders))

    for i in range(num_reviews_to_create):
        review_uuid = str(uuid.uuid4())
        order_uuid, order_info = completed_orders[i]
        user_id = order_info['user_id']
        store_id = order_info['store_id']
        rating = random.randint(1, 5)
        content = fake.text(max_nb_chars=100)

        f.write(
            f"INSERT INTO p_review(created_at, updated_at, rating, user_id, b_order_id, review_id, store_id, content) VALUES "
            f"(now(), now(), {rating}, {user_id}, '{order_uuid}', '{review_uuid}', '{store_id}', '{content}');\n"
        )
    f.write("\n")

print(f"'{'dummy_data.sql'}' 파일이 성공적으로 생성되었습니다.")