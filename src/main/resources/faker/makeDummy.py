import uuid
import random
import csv
from faker import Faker

# 한국어 데이터를 위한 Faker 초기화
fake = Faker('ko_KR')

# --- 생성할 데이터 개수 설정 ---
NUM_CATEGORIES = 10
NUM_USERS = 10000
NUM_STORES = 50
NUM_MENUS_PER_STORE = 20
NUM_ORDERS = 50  # 생성할 주문 개수
NUM_REVIEWS = 50 # 생성할 리뷰 개수

# 생성된 ID를 저장하여 외래 키로 사용
region_ids = []
category_ids_map = {} # 카테고리 이름과 UUID를 매핑하여 저장
user_ids = list(range(1, NUM_USERS + 1))
store_ids_map = {} # 가게 UUID와 카테고리 UUID를 매핑하여 저장
order_ids_map = {} # 주문 UUID와 (유저ID, 가게ID)를 매핑하여 저장

# CSV 파일로 저장할 유저 데이터 리스트
user_data_list = []


# 생성된 SQL 쿼리를 저장할 파일 열기
with open('dummy_data.sql', 'w', encoding='utf-8') as f:
    f.write("-- Dummy Data Generated by Python Script\n\n")

    # --- 1. 지역(Region) 데이터 생성 ---
    f.write("-- 1. REGION DATA\n")
    # 예시로 1개의 지역만 생성 (필요시 늘릴 수 있음)
    region_uuid = str(uuid.uuid4())
    region_ids.append(region_uuid)
    region_code = ''.join(random.choices('0123456789ABCDEF', k=9))
    full_name = f"{fake.city()} {fake.street_name()}"
    sido = fake.province()
    sigungu = fake.city()
    eupmyendong = fake.street_name()

    f.write(
        f"INSERT INTO p_region (created_at, updated_at, region_id, region_code, region_name, is_active, full_name, sido, sigungu, eupmyendong) VALUES "
        f"(now(), now(), '{region_uuid}', '{region_code}', '{eupmyendong}', TRUE, '{full_name}', '{sido}', '{sigungu}', '{eupmyendong}');\n\n"
    )

    # --- 2. 카테고리(Category) 데이터 생성 ---
    f.write("-- 2. CATEGORY DATA\n")
    categories = ['치킨', '피자', '한식', '중식', '일식', '분식', '카페·디저트', '패스트푸드', '아시안', '족발·보쌈']
    for i in range(NUM_CATEGORIES):
        category_uuid = str(uuid.uuid4())
        category_name = categories[i]
        category_ids_map[category_name] = category_uuid
        f.write(
            f"INSERT INTO p_category (created_at, updated_at, category_id, category_name) VALUES "
            f"(now(), now(), '{category_uuid}', '{category_name}');\n"
        )
    f.write("\n")

    # --- 3. 유저(User) 데이터 생성 ---
    f.write("-- 3. USER DATA\n")
    owner_user_ids = user_ids[:NUM_STORES] # 가게 수만큼 사장님 유저 할당
    customer_user_ids = user_ids[NUM_STORES:] # 나머지는 고객 유저

    for user_id in user_ids:
        role = 'OWNER' if user_id in owner_user_ids else 'CUSTOMER'
        real_name = fake.name()
        nickname = f"{real_name.replace(' ', '')}{user_id}"
        username = fake.unique.user_name()
        email = fake.unique.email()
        phone_number = fake.unique.phone_number().replace('-', '')
        password = 'password_pla' # 실제 사용 시에는 암호화된 비밀번호 사용

        # SQL 파일에 쓰기
        f.write(
            f"INSERT INTO p_user (created_at, updated_at, phone_number, user_role, nickname, real_name, username, email, password) VALUES "
            f"(now(), now(), '{phone_number}', '{role}', '{nickname}', '{real_name}', '{username}', '{email}', '{password}');\n"
        )
        
        # CSV 파일용 데이터 리스트에 추가
        user_data_list.append({
            'user_id': user_id,
            'user_role': role,
            'real_name': real_name,
            'nickname': nickname,
            'username': username,
            'email': email,
            'phone_number': phone_number,
            'password': password
        })
    f.write("\n")

    # --- 4. 가게(Store) 데이터 생성 ---
    f.write("-- 4. STORE DATA\n")
    category_uuids = list(category_ids_map.values())
    for i in range(NUM_STORES):
        store_uuid = str(uuid.uuid4())
        owner_id = owner_user_ids[i]
        category_uuid = random.choice(category_uuids)
        region_uuid = random.choice(region_ids)
        store_name = f"{fake.company()} {random.choice(categories)}점"
        phone_number = fake.phone_number()
        address = fake.address()
        description = f"신선한 재료로 정성을 다하는 {store_name}입니다."
        min_order_amount = random.choice([5000, 10000, 12000, 15000])

        store_ids_map[store_uuid] = category_uuid # 나중에 메뉴 생성 시 사용

        f.write(
            f"INSERT INTO p_store (created_at, min_order_amount, updated_at, user_id, category_id, region_id, store_id, phone_number, store_name, address, description, store_accept_status) VALUES "
            f"(now(), {min_order_amount}, now(), {owner_id}, '{category_uuid}', '{region_uuid}', '{store_uuid}', '{phone_number}', '{store_name}', '{address}', '{description}', 'APPROVE');\n"
        )
    f.write("\n")

    # --- 5. 메뉴(Menu) 데이터 생성 ---
    f.write("-- 5. MENU DATA\n")
    menu_names = ['[시그니처]황금올리브', '뿌링클', '허니콤보', '페퍼로니피자', '포테이토피자', '김치찌개', '된장찌개', '짜장면', '짬뽕', '초밥세트', '우동', '떡볶이', '순대', '아메리카노', '카페라떼', '치즈버거', '불고기버거', '쌀국수', '팟타이', '왕족발']
    for store_uuid, category_uuid in store_ids_map.items():
        for _ in range(NUM_MENUS_PER_STORE):
            menu_uuid = str(uuid.uuid4())
            name = random.choice(menu_names)
            description = f"정말 맛있는 {name}입니다!"
            price = random.randint(5, 30) * 1000

            f.write(
                f"INSERT INTO p_menu (created_at, updated_at, menu_id, store_id, name, description, price, is_hidden, category_id) VALUES "
                f"(now(), now(), '{menu_uuid}', '{store_uuid}', '{name}', '{description}', {price}, FALSE, '{category_uuid}');\n"
            )
    f.write("\n")

    # --- 6. 주문(Order) 데이터 생성 ---
    f.write("-- 6. ORDER DATA\n")
    store_uuid_list = list(store_ids_map.keys())
    for _ in range(NUM_ORDERS):
        order_uuid = str(uuid.uuid4())
        user_id = random.choice(customer_user_ids)
        store_id = random.choice(store_uuid_list)
        total_price = random.randint(15, 50) * 1000
        order_status = random.choice(['PENDING',
            'ACCEPTED',
            'COOKING',
            'IN_DELIVERY',
            'COMPLETED',
            'REJECTED',
            'REFUNDED',
            'FAILED'])

        # 완료된 주문만 리뷰 생성을 위해 저장
        if order_status == 'COMPLETED':
            order_ids_map[order_uuid] = {'user_id': user_id, 'store_id': store_id}

        f.write(
            f"INSERT INTO p_orders(created_at, updated_at, is_refundable, total_price, orders_id, store_id, order_channel, order_status, receipt_method, payment_method, delivery_address, order_history, user_id) VALUES "
            f"(now(), now(), false, {total_price}, '{order_uuid}', '{store_id}', 'ONLINE', '{order_status}', 'DELIVERY', 'CREDIT_CARD', '{fake.address()}', '주문 내역 텍스트', {user_id});\n"
        )
    f.write("\n")

    # --- 7. 리뷰(Review) 데이터 생성 ---
    f.write("-- 7. REVIEW DATA\n")
    completed_orders = list(order_ids_map.items())
    # 생성할 리뷰 개수와 완료된 주문 개수 중 작은 값만큼만 생성
    num_reviews_to_create = min(NUM_REVIEWS, len(completed_orders))

    for i in range(num_reviews_to_create):
        review_uuid = str(uuid.uuid4())
        order_uuid, order_info = completed_orders[i]
        user_id = order_info['user_id']
        store_id = order_info['store_id']
        rating = random.randint(1, 5)
        content = fake.text(max_nb_chars=100)

        f.write(
            f"INSERT INTO p_review(created_at, updated_at, rating, user_id, b_order_id, review_id, store_id, content) VALUES "
            f"(now(), now(), {rating}, {user_id}, '{order_uuid}', '{review_uuid}', '{store_id}', '{content}');\n"
        )
    f.write("\n")

# CSV 파일로 유저 데이터 저장
with open('user_data.csv', 'w', newline='', encoding='utf-8') as csvfile:
    fieldnames = ['user_id', 'user_role', 'real_name', 'nickname', 'username', 'email', 'phone_number', 'password']
    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
    
    # CSV 헤더 작성
    writer.writeheader()
    
    # 유저 데이터 작성
    for user_data in user_data_list:
        writer.writerow(user_data)

print(f"'dummy_data.sql' 파일이 성공적으로 생성되었습니다.")
print(f"'user_data.csv' 파일이 성공적으로 생성되었습니다.")